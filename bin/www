#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('serverWatcher:server');
//var http = require('http');
var https = require('https');
var fs = require('fs');

var area = require("../models/area");

var sslOptions = {
    key: fs.readFileSync(__dirname + '/../ssl/server.key'),
    cert: fs.readFileSync(__dirname + '/../ssl/server.crt')
};

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = https.createServer(sslOptions, app);
var io = require("socket.io")(server);

var GPSTrackingStart = false;
//var markedAreas = [];
//var GPSTrackingRoom = "gpsTracking";
// Database
var mongo = require('mongoskin');
var db = mongo.db("mongodb://localhost:27017/wifiLogger", {native_parser: true});

var GPSTrackingData = {};

var areaFetchSession = {};

var sendGPSTrackingInterval = null;

io.on("connection", function(socket){
    console.log("Client connected___________________________________");
    socket.on("wifi/fingerprint", function(data){
      data = JSON.parse(data);
      console.log(data);
      db.collection('fingerprint').insert(data, function(err,result){
        if(err){
          console.log(err);
        }
      });
    });

    if(GPSTrackingStart) {
      socket.emit('gps_tracking_start');
    }
    else {
      socket.emit('gps_tracking_stop');
    }

    socket.on("client/join_ui", function(){
      socket.join("_room_ui", function(){
        console.log("UI joined");
      });
    });

    socket.on("update_complete", function(){
        console.log("update completed");
        socket.emit("update_received");
        socket.broadcast.emit('ip_update');
    });

    socket.on("start_gps_tracking", function(){
      console.log("Start GPS Tracking");
      GPSTrackingStart = true;
      socket.broadcast.emit('gps_tracking_start');
      if(sendGPSTrackingInterval === null) {
          sendGPSTrackingInterval = setInterval(function(){
              //io.sockets.emit("gpsTrace", GPSTrackingData);
              io.to("_room_ui").emit("gpsTrace", GPSTrackingData);
          }, 3000);
      }
    });

    socket.on("stop_gps_tracking", function(){
      console.log("Stop GPS Tracking");
      GPSTrackingStart = false;
      socket.broadcast.emit('gps_tracking_stop');
      clearInterval(sendGPSTrackingInterval);
      sendGPSTrackingInterval = null;
    });

    socket.on("gps_trace", function(gps){
      //console.log(gps);
      //var inside = require('turf-inside');
      //socket.broadcast.emit('gpsTrace', gps);
      GPSTrackingData[gps.id] = gps;
    });

    socket.on("area/add", function(data) {
      socket.broadcast.emit("area/add", data)
    });

    socket.on("area/delete", function(data) {
      socket.broadcast.emit("area/delete", data)
    });

    socket.on("area/fetch", function(){
      if(areaFetchSession.hasOwnProperty(socket.id)) {
        return;
      }
      areaFetchSession[socket.id] = new Date();

      console.log("#### fetching area for " + socket.id);
      var area = require("../models/area");
      var Area = new area();
      var filter = {$or:[{name:"broadcast_area_kanto"},{name:"HanedaAirport"}]}
      Area.getArray(function(data){
          console.log("fetching " + data.length + " areas");
          //var d = Object.keys(data).map(function(key){ return {area_id:data[key].area_id, cuids: data[key].cuids, coords:data[key].coords}; });
          var d = Object.keys(data).map(function(key){
            return {
              area_id:data[key].area_id,
              cuids: data[key].cuids,
              coords:Object.keys(data[key].coords).map(function(k){
                return {
                  lat: Math.round(data[key].coords[k].lat * 1000000) / 1000000,
                  lng: Math.round(data[key].coords[k].lng * 1000000) / 1000000,
                };
              })
            };
          });
          socket.emit('area/fetch', d);
          setTimeout(function(){
            delete areaFetchSession[socket.id];
          }, 300000);
          //socket.emit('area/fetch', []);

      });
    });
    socket.on("area/fetch_update", function(area_id){
      console.log("refetching area");
      var area = require("../models/area");
      var Area = new area();
      Area.getSingleEntry({area_id: area_id},function(data){
          console.log(data);
          if(data) {
              socket.broadcast.emit("area/add", data);
          }
      });
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
