#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('serverWatcher:server');
//var http = require('http');
var https = require('https');
var fs = require('fs');

var sslOptions = {
    key: fs.readFileSync(__dirname + '/../ssl/server.key'),
    cert: fs.readFileSync(__dirname + '/../ssl/server.crt')
};

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = https.createServer(sslOptions, app);
var io = require("socket.io")(server);

var GPSTrackingStart = false;
//var markedAreas = [];
//var GPSTrackingRoom = "gpsTracking";

io.on("connection", function(socket){
    console.log("Client connected");
    if(GPSTrackingStart) {
      socket.emit('gps_tracking_start');
    }
    else {
      socket.emit('gps_tracking_stop');
    }

    socket.on("update_complete", function(){
        console.log("update completed");
        socket.emit("update_received");
        socket.broadcast.emit('ip_update');
    });

    socket.on("start_gps_tracking", function(){
      console.log("Start GPS Tracking");
      GPSTrackingStart = true;
      socket.broadcast.emit('gps_tracking_start');
    });

    socket.on("stop_gps_tracking", function(){
      console.log("Stop GPS Tracking");
      GPSTrackingStart = false;
      socket.broadcast.emit('gps_tracking_stop');
    });

    socket.on("gps_trace", function(gps){
      console.log(gps);
      //var inside = require('turf-inside');
      socket.broadcast.emit('gpsTrace', gps);
    });

    socket.on("add_new_polygon", function(coords) {
      //markedAreas = coords;
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
